[
    {
        "apiSpeakerUrl": "https://api.github.com/users/bookercodes",
        "speakerUrl": "https://github.com/bookercodes",
        "title": "Write More Resilient JavaScript with Flow",
        "description": "<p><strong>Abstract</strong>&#13;&#10;&#13;&#10;Flow is a static type checker for JavaScript (an otherwise dynamically-typed language). You can think of it as a productivity tool that catches common errors <em>before</em> they run. &#13;&#10;&#13;&#10;Take the infamous &quot;&#39;Undefined&#39; is not a function&quot; error as an example. When writing vanilla JavaScript, you would have to wait until runtime to receive this arduous error. Flow - on the other hand - integrates with your favorite editor and analyzes the correctness of your code as you write it. If you were to reference a non-existent function, Flow would not only tell you immediately but also provide additional context that makes the error easier to fix.&#13;&#10;&#13;&#10;Whilst Flow is predominantly used with front-end technologies like React, I have been using it with great success for my Node.js projects and in this talk, I&#39;ll not only show you how to get up and running with Flow, I&#39;ll also share my experience with you. I&#39;ll also take a moment at the end of my talk to touch on the differences between Flow and TypeScript.&#13;&#10;&#13;&#10;<strong>Alex Booker</strong>&#13;&#10;&#13;&#10;Alex Booker is a Developer Advocate at <a href=\"https://pusher.com/\">Pusher</a>. There, he spends his time learning and writing about interesting, emerging technologies, and representing Pusher at events around the world. In his spare time, he runs a YouTube channel called <a href=\"https://www.youtube.com/c/codecast\">Code Cast</a> where he uploads educational screencasts about Linux and JavaScript. You can find him on Twitter <a href=\"https://twitter.com/bookercodes\">@bookercodes</a>.</p>\n",
        "milestone": "October 26th 2016",
        "img": "https://avatars.githubusercontent.com/u/11927968?v=3",
        "handle": "bookercodes",
        "name": "Booker âš¡"
    },
    {
        "apiSpeakerUrl": "https://api.github.com/users/lazlojuly",
        "speakerUrl": "https://github.com/lazlojuly",
        "title": "Design, document, mock and test a RESTful API in 20 minutes",
        "description": "<p>This talk introduces 4 open-source projects that can be used together in a powerful combination to document, mock and test APIs.&#13;&#10;&#13;&#10;Talk agenda:&#13;&#10;1. Write a simple <a href=\"https://apiblueprint.org/\">API Blueprint</a> documentation&#13;&#10;2. Render documentation as HTML with <a href=\"https://github.com/danielgtaylor/aglio\">aglio</a>&#13;&#10;3. Setup API testing with with <a href=\"https://github.com/apiaryio/dredd\">Dredd</a>&#13;&#10;4. Implement a simple endpoint manually (pass a failing test)&#13;&#10;5. Mock all endpoints with <a href=\"https://github.com/Aconex/drakov\">Drakov</a>&#13;&#10;&#13;&#10;The tools:&#13;&#10;<em> <a href=\"https://apiblueprint.org/\">API Blueprint</a> is a Markdown-based document format that lets you write API descriptions and documentation in a simple and straightforward way.&#13;&#10;</em> <a href=\"https://github.com/danielgtaylor/aglio\">aglio</a> is API Blueprint renderer that outputs static HTML that can be served by any web host.&#13;&#10;<em> <a href=\"https://github.com/apiaryio/dredd\">Dredd</a> is a language-agnostic command-line tool for validating API description documents. It now supports both API Blueprint and Swagger description formats.&#13;&#10;</em> <a href=\"https://github.com/Aconex/drakov\">Drakov</a> is a mock server that implements the API Blueprint specification.&#13;&#10;&#13;&#10;&#13;&#10;Bio: I am a JavaScript Engineer. Connect with me on <a href=\"https://twitter.com/lazlojuly\">Twitter</a>, <a href=\"https://www.linkedin.com/in/lazlojuly\">LinkedIn</a> or <a href=\"https://github.com/lazlojuly\">GitHub</a>&#13;&#10;</p>\n",
        "milestone": "October 26th 2016",
        "img": "https://avatars.githubusercontent.com/u/7015868?v=3",
        "handle": "lazlojuly",
        "name": "lazlojuly"
    },
    {
        "apiSpeakerUrl": "https://api.github.com/users/mikemaccana",
        "speakerUrl": "https://github.com/mikemaccana",
        "title": "Quick wins with node and Google AMP",
        "description": "<p>Google&#39;s Accelerated Mobile Pages (AMP) is a subset of HTML designed to load as quickly as possible. AMP pages keep your users happy, get you higher in search engine results pages, and related features like structured data can get you right to the top. Here&#39;s how a little node engineering can mean more money in your pocket. &#13;&#10;&#13;&#10;# Talk Description&#13;&#10;&#13;&#10;What AMP is:&#13;&#10; - What you gain (pagerank, content previews inside Google search, low latency)&#13;&#10; - What still works and what breaks (analytics, conversion tracking etc support is still ongoing)&#13;&#10;&#13;&#10;Implementing AMP in a node app:&#13;&#10;&#13;&#10; - Creating an AMP version of your existing layout&#13;&#10; - Converting output from your existing template engine to AMPHTML via server-side DOM manipulation&#13;&#10; - Handing analytics in an AMPHTML world&#13;&#10;&#13;&#10;I&#39;ve written and Open Soured some express-compatible middleware to make this job easier, see <a href=\"https://www.npmjs.com/package/amps-in-the-trunk&#13;&#10;&#13;&#10;##\">https://www.npmjs.com/package/amps-in-the-trunk&#13;&#10;&#13;&#10;##</a> Bio&#13;&#10;&#13;&#10;Mike MacCana is the founder of CertSimple, a startup that provides EV HTTPS certs - the ones where they check who you are - 40-500x faster than it&#39;s competitors. He&#39;s previously built web apps for Google, Adobe and Microsoft.</p>\n",
        "milestone": "October 26th 2016",
        "img": "https://avatars.githubusercontent.com/u/172594?v=3",
        "handle": "mikemaccana",
        "name": "Mike MacCana"
    }
]