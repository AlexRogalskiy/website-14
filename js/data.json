{"all": [{"username": "ohjames", "name": "Mr Friend", "title": "The state of web asset pipelines and the description of a new pipeline that combines the best of all worlds.", "avatar": "https://avatars.githubusercontent.com/u/97685?v=3", "date": "April 22nd 2015", "desc": "People soon realised that a task runner is not an asset pipeline, maybe sometime after the millionth spaghetti gruntfile was written. Along came gulp, the wonderful streaming pipeline, but the people saw that it was flawed, being built around `1:1` operations (disallowing nice n:1 stuff such as concatenation of streams together with their source maps).<br><br>Then came plumber, broccoli, gobble, and metalsmith, all with unique selling points yet all having drawbacks not found in grunt and/or gulp.<br><br>It was time for a new asset pipeline to be born out of the pain of trying to find the holy grail of asset pipelines. It was time to write it using functional reactive programming, ES6 and a geekgasm of buzz-words to seduce the JavaScript community. It was time for a bullshit sensationalised lnug talk abstract. Yes, it's time to sigh. <a href='https://github.com/sighjs/sigh'>sighjs</a>.<br><br>In this talk I will describe the issues with existing asset pipelines (read: trash all the competition) and describe how sighjs improves upon the state of the art (read: gloriously inflate my ego).<br><br>This talk will last around 10 minutes long and it will be a little surreal. Here is <a href='https://vimeo.com/31535266j'>one of my other talks at HNN</a>."}, {"username": "jamesallardice", "name": "James Allardice", "title": "Writing and publishing ES6 code today", "avatar": "https://avatars.githubusercontent.com/u/1089719?v=3", "date": "April 22nd 2015", "desc": "On February 20th the first release candidate of the 6th edition of the ECMAScript specification (ECMAScript 2015 as it is now officially known) was released. The language is rapidly stabilising and the new features are slowly but surely making their way into the existing JavaScript engines. Unfortunately, it will still be a while before we're able to write ES6 code and have it run natively in either browsers or Node and io.js. Thankfully TC39 (the group responsible for the development of the ECMAScript specification) put a lot of effort into ensuring backwards compatibility so it is possible to use a large and growing proportion of ES6 today.<br><br>This talk will look into some of the technologies and techniques that can be used to write, publish and deploy ES6 code today, without having to wait until the engines catch up. We'll explore source-to-source compilation, standard library polyfills, publishing modules written in ES6 to npm and the consumption of those modules by existing ES5 and new ES6 code."}, {"username": "simonmcmanus", "name": "Simon McManus", "title": "Progressive Enhancement Strategies", "avatar": "https://avatars.githubusercontent.com/u/55853?v=3", "date": "April 22nd 2015", "desc": "Advances in JavaScript are changing the way that we think about the web; it's no longer just a platform for information, but for complex interactions too.<br><br>As we race into the future, we risk losing some of the things that make the web so special.<br><br>In this talk I will outline why I believe progressive enhancement is still important. Demonstrating processes, techniques and architectures which provide the benefits without introducing an overhead. "}]}