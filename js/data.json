{"all": [{"username": "ohjames", "name": "Mr Friend", "title": "The state of web asset pipelines and the description of a new pipeline that combines the best of all worlds.", "avatar": "https://avatars.githubusercontent.com/u/97685?v=3", "date": "May 27th 2015", "desc": "People soon realised that a task runner is not an asset pipeline, maybe sometime after the millionth spaghetti gruntfile was written. Along came gulp, the wonderful streaming pipeline, but the people saw that it was flawed, being built around `1:1` operations (disallowing nice n:1 stuff such as concatenation of streams together with their source maps).<br><br>Then came plumber, broccoli, gobble, and metalsmith, all with unique selling points yet all having drawbacks not found in grunt and/or gulp.<br><br>It was time for a new asset pipeline to be born out of the pain of trying to find the holy grail of asset pipelines. It was time to write it using functional reactive programming, ES6 and a geekgasm of buzz-words to seduce the JavaScript community. It was time for a bullshit sensationalised lnug talk abstract. Yes, it's time to sigh. <a href='https://github.com/sighjs/sigh'>sighjs</a>.<br><br>In this talk I will describe the issues with existing asset pipelines (read: trash all the competition) and describe how sighjs improves upon the state of the art (read: gloriously inflate my ego).<br><br>This talk will last around 10 minutes long and it will be a little surreal. Here is <a href='https://vimeo.com/31535266j'>one of my other talks at HNN</a>."}, {"username": "sideshowcoder", "name": "Philipp Fehre", "title": "Server mocking with canned", "avatar": "https://avatars.githubusercontent.com/u/108488?v=3", "date": "May 27th 2015", "desc": "I've been frustrated with the complexity involved with just setting up a mock server so I wrote <a href='https://github.com/sideshowcoder/canned'>canned</a> sometime ago making faking a webserver just a matter of putting files in folders. This simple approach led to a whole bunch of usecase from <br><br>- frontend development first, backend later<br>- mock server for testing<br>- performance testing for mobile apps without backend influence<br><br>I think some of this would make an interesting talk and maybe some people might even find a use for canned in their own work. "}]}