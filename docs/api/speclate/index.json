{
    "page": "home",
    "selectors": {
        "title": "London Node User Group - LNUG",
        "h1": {
            "className": "animated bounceInTop"
        },
        "small.notice": "Map provided by © <a href='https://www.mapbox.com/about/maps/'>Mapbox</a> &amp; © <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a>"
    },
    "spec": {
        ".lnug-ticket": {
            "component": "ticket",
            "data": {
                ".lnug-nextmeetup": "October 26th 2016",
                ".venue": "Makers Academy",
                "address": "50 - 52 Commercial St<br />London E1 6LT",
                ".address a": {
                    "href": "https://www.google.co.uk/maps/search/50 - 52 Commercial St, London E1 6LT"
                },
                "a.cta": {
                    "href": "http://www.meetup.com/london-nodejs/"
                }
            }
        },
        ".lnug-content": {
            "component": "speaker",
            "data": [
                {
                    ".name": "Booker ⚡",
                    ".title": "Write More Resilient JavaScript with Flow",
                    ".desc": "<p><strong>Abstract</strong>&#13;&#10;&#13;&#10;Flow is a static type checker for JavaScript (an otherwise dynamically-typed language). You can think of it as a productivity tool that catches common errors <em>before</em> they run. &#13;&#10;&#13;&#10;Take the infamous &quot;&#39;Undefined&#39; is not a function&quot; error as an example. When writing vanilla JavaScript, you would have to wait until runtime to receive this arduous error. Flow - on the other hand - integrates with your favorite editor and analyzes the correctness of your code as you write it. If you were to reference a non-existent function, Flow would not only tell you immediately but also provide additional context that makes the error easier to fix.&#13;&#10;&#13;&#10;Whilst Flow is predominantly used with front-end technologies like React, I have been using it with great success for my Node.js projects and in this talk, I&#39;ll not only show you how to get up and running with Flow, I&#39;ll also share my experience with you. I&#39;ll also take a moment at the end of my talk to touch on the differences between Flow and TypeScript.&#13;&#10;&#13;&#10;<strong>Alex Booker</strong>&#13;&#10;&#13;&#10;Alex Booker is a Developer Advocate at <a href=\"https://pusher.com/\">Pusher</a>. There, he spends his time learning and writing about interesting, emerging technologies, and representing Pusher at events around the world. In his spare time, he runs a YouTube channel called <a href=\"https://www.youtube.com/c/codecast\">Code Cast</a> where he uploads educational screencasts about Linux and JavaScript. You can find him on Twitter <a href=\"https://twitter.com/bookercodes\">@bookercodes</a>.</p>\n",
                    "img": {
                        "src": "https://avatars.githubusercontent.com/u/11927968?v=3"
                    },
                    ".lnug-twitterhandle a": {
                        "href": "https://github.com/bookercodes"
                    }
                },
                {
                    ".name": "lazlojuly",
                    ".title": "How to build a RESTful API",
                    ".desc": "<p>Talk agenda:&#13;&#10;1. The REST Design&#13;&#10;2. Specification&#13;&#10;3. Mocking&#13;&#10;4. Testing&#13;&#10;&#13;&#10;This talk will also look at some popular API tools.&#13;&#10;&#13;&#10;Bio: I am a JavaScript Engineer. Connect with me on <a href=\"https://twitter.com/lazlojuly\">Twitter</a>, <a href=\"https://www.linkedin.com/in/lazlojuly\">LinkedIn</a> or <a href=\"https://github.com/lazlojuly\">GitHub</a></p>\n",
                    "img": {
                        "src": "https://avatars.githubusercontent.com/u/7015868?v=3"
                    },
                    ".lnug-twitterhandle a": {
                        "href": "https://github.com/lazlojuly"
                    }
                },
                {
                    ".name": "Mike MacCana",
                    ".title": "Quick wins with node and Google AMP",
                    ".desc": "<p>Google&#39;s Accelerated Mobile Pages (AMP) is a subset of HTML designed to load as quickly as possible. AMP pages keep your users happy, get you higher in search engine results pages, and related features like structured data can get you right to the top. Here&#39;s how a little node engineering can mean more money in your pocket. &#13;&#10;&#13;&#10;# Talk Description&#13;&#10;&#13;&#10;What AMP is:&#13;&#10; - What you gain (pagerank, content previews inside Google search, low latency)&#13;&#10; - What still works and what breaks (analytics, conversion tracking etc support is still ongoing)&#13;&#10;&#13;&#10;Implementing AMP in a node app:&#13;&#10;&#13;&#10; - Creating an AMP version of your existing layout&#13;&#10; - Converting output from your existing template engine to AMPHTML via server-side DOM manipulation&#13;&#10; - Handing analytics in an AMPHTML world&#13;&#10;&#13;&#10;I&#39;ve written and Open Soured some express-compatible middleware to make this job easier, see <a href=\"https://www.npmjs.com/package/amps-in-the-trunk&#13;&#10;&#13;&#10;##\">https://www.npmjs.com/package/amps-in-the-trunk&#13;&#10;&#13;&#10;##</a> Bio&#13;&#10;&#13;&#10;Mike MacCana is the founder of CertSimple, a startup that provides EV HTTPS certs - the ones where they check who you are - 40-500x faster than it&#39;s competitors. He&#39;s previously built web apps for Google, Adobe and Microsoft.</p>\n",
                    "img": {
                        "src": "https://avatars.githubusercontent.com/u/172594?v=3"
                    },
                    ".lnug-twitterhandle a": {
                        "href": "https://github.com/mikemaccana"
                    }
                }
            ]
        },
        ".lnug-mailing-list": {
            "component": "sign-up"
        }
    }
}